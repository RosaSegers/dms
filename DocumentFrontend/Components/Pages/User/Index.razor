@page "/profile"
@rendermode InteractiveServer

@using DocumentFrontend.Models
@using DocumentFrontend.Services

@inject AuthService AuthService
@inject NavigationManager Navigation

<h3 class="mb-4">👤 User Profile</h3>

@if (IsLoading)
{
    <p>Loading user data...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else if (User == null)
{
    <p>User not found or not logged in.</p>
}
else
{
    <EditForm Model="User" OnValidSubmit="HandleValidSubmit" FormName="userProfileForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="User.Name" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="User.Email" />
        </div>

        <!-- Add more fields as needed -->

        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>

    <hr />

    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete My Account</button>

    @if (_confirmDelete)
    {
        <div class="mt-3 alert alert-warning">
            <p>Are you sure you want to delete your account? This action cannot be undone.</p>
            <button class="btn btn-danger me-2" @onclick="DeleteAccountAsync">Yes, Delete My Account</button>
            <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
        </div>
    }
}

@code {
    private UserModel? User;
    private bool IsLoading = true;
    private string? ErrorMessage;
    private bool _confirmDelete = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsync();
    }

    private async Task LoadUserAsync()
    {
        IsLoading = true;
        ErrorMessage = null;

        try
        {
            User = await AuthService.GetCurrentUserAsync();
            if (User == null)
            {
                ErrorMessage = "User not found or not logged in.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading user info: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessage = null;

        if (User == null)
        {
            ErrorMessage = "No user to update.";
            return;
        }

        try
        {
            bool updated = await AuthService.UpdateUserAsync(User);

            if (!updated)
            {
                ErrorMessage = "Failed to update user info.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error updating user info: {ex.Message}";
        }
    }

    private void ConfirmDelete()
    {
        _confirmDelete = true;
    }

    private void CancelDelete()
    {
        _confirmDelete = false;
    }

    private async Task DeleteAccountAsync()
    {
        ErrorMessage = null;

        if (User == null)
        {
            ErrorMessage = "No user to delete.";
            return;
        }

        try
        {
            bool deleted = await AuthService.DeleteUserAsync(User.Id);

            if (deleted)
            {
                Navigation.NavigateTo("/logout", forceLoad: true);
            }
            else
            {
                ErrorMessage = "Failed to delete account.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting account: {ex.Message}";
        }
    }
}
