name: .NET CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  DOTNET_CORE_VERSION: '8.0'
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      api_gateway_changed: ${{ steps.filter.outputs.api_gateway }}
      document_api_changed: ${{ steps.filter.outputs.document_api }}
      user_api_changed: ${{ steps.filter.outputs.user_api }}
      access_control_changed: ${{ steps.filter.outputs.access_control }}
      auditing_changed: ${{ steps.filter.outputs.auditing }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            api_gateway:
              - 'ApiGateway/**'
            document_api:
              - 'Document/**'
            user_api:
              - 'User/**'
            access_control:
              - 'Access_Control/**'
            auditing:
              - 'Auditing/**'

  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

  lint:
    name: Roslyn Code Analysis
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - name: Run build with warnings as errors
        run: dotnet build DocumentManagementSystem.sln -warnaserro
        continue-on-error: true

  format-check:
    name: Code Format Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - name: Install dotnet-format
        run: dotnet tool install -g dotnet-format
      - name: Run dotnet-format
        run: dotnet format --verify-no-changes DocumentManagementSystem.sln
        continue-on-error: true

  # --- Gateway ---
  build-api-gateway:
    runs-on: ubuntu-latest
    needs: [setup, lint, format-check, filter]
    if: needs.filter.outputs.api_gateway_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - run: |
          cd ApiGateway
          dotnet restore ApiGateway.csproj
          dotnet build --configuration Release ApiGateway.csproj

  docker-build-gateway:
    runs-on: ubuntu-latest
    needs: [build-api-gateway, filter]
    if: needs.filter.outputs.api_gateway_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Build Docker image for Api Gateway
        run: docker build -t gyliana/api-gateway:${{ github.sha }} -f ApiGateway/Dockerfile .
      - name: Push Docker image with SHA tag
        run: docker push gyliana/api-gateway:${{ github.sha }}
      - name: Tag image as latest
        run: docker tag gyliana/api-gateway:${{ github.sha }} gyliana/api-gateway:latest
      - name: Push latest tag
        run: docker push gyliana/api-gateway:latest

  # --- Document API ---
  build-document-api:
    runs-on: ubuntu-latest
    needs: [setup, lint, format-check, filter]
    if: needs.filter.outputs.document_api_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - run: |
          cd Document/Document.API
          dotnet restore Document.API.csproj
          dotnet build --configuration Release Document.API.csproj

  test-document:
    runs-on: ubuntu-latest
    needs: [build-document-api, filter]
    if: needs.filter.outputs.document_api_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
      - name: Install dependencies
        run: dotnet restore Document/Document.Api.Test/Document.Api.Test.csproj
      - name: Run tests
        run: |
          cd Document/Document.Api.Test
          dotnet test --configuration Release
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: document-api-test-results
          path: Document/Document.Api.Test/TestResults

  docker-build-document:
    runs-on: ubuntu-latest
    needs: [test-document, filter]
    if: needs.filter.outputs.document_api_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Build Docker image for Document API
        run: docker build -t gyliana/document-api:${{ github.sha }} -f Document/Document.API/Dockerfile .
      - name: Push Docker image with SHA tag
        run: docker push gyliana/document-api:${{ github.sha }}
      - name: Tag image as latest
        run: docker tag gyliana/document-api:${{ github.sha }} gyliana/document-api:latest
      - name: Push latest tag
        run: docker push gyliana/document-api:latest

  # --- User API ---
  build-user-api:
    runs-on: ubuntu-latest
    needs: [setup, lint, format-check, filter]
    if: needs.filter.outputs.user_api_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - run: |
          cd User/User.API
          dotnet restore User.API.csproj
          dotnet build --configuration Release User.API.csproj

  test-user:
    runs-on: ubuntu-latest
    needs: [build-user-api, filter]
    if: needs.filter.outputs.user_api_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
      - name: Install dependencies
        run: dotnet restore User/User.Api.Test/User.Api.Test.csproj
      - name: Run tests
        run: |
          cd User/User.Api.Test
          dotnet test --configuration Release
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: user-api-test-results
          path: User/User.Api.Test/TestResults

  docker-build-user:
    runs-on: ubuntu-latest
    needs: [test-user, filter]
    if: needs.filter.outputs.user_api_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Build Docker image for User API
        run: docker build -t gyliana/user-api:${{ github.sha }} -f User/User.API/Dockerfile .
      - name: Push Docker image with SHA tag
        run: docker push gyliana/user-api:${{ github.sha }}
      - name: Tag image as latest
        run: docker tag gyliana/user-api:${{ github.sha }} gyliana/user-api:latest
      - name: Push latest tag
        run: docker push gyliana/user-api:latest

  # --- Access Control ---
  build-access-control:
    runs-on: ubuntu-latest
    needs: [setup, lint, format-check, filter]
    if: needs.filter.outputs.access_control_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - run: |
          cd Access_Control/AccessControl.Api
          dotnet restore AccessControl.Api.csproj
          dotnet build --configuration Release AccessControl.Api.csproj

  test-access-control:
    runs-on: ubuntu-latest
    needs: [build-access-control, filter]
    if: needs.filter.outputs.access_control_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
      - name: Install dependencies
        run: dotnet restore Access_Control/AccessControl.Api.Test/AccessControl.Api.Test.csproj
      - name: Run tests
        run: |
          cd Access_Control/AccessControl.Api.Test
          dotnet test --configuration Release
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: access-control-api-test-results
          path: Access_Control/AccessControl.Api.Test/TestResults

  docker-build-access-control:
    runs-on: ubuntu-latest
    needs: [test-access-control, filter]
    if: needs.filter.outputs.access_control_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Build Docker image for Access Control API
        run: docker build -t gyliana/access-control-api:${{ github.sha }} -f Access_Control/AccessControl.Api/Dockerfile .
      - name: Push Docker image with SHA tag
        run: docker push gyliana/access-control-api:${{ github.sha }}
      - name: Tag image as latest
        run: docker tag gyliana/access-control-api:${{ github.sha }} gyliana/access-control-api:latest
      - name: Push latest tag
        run: docker push gyliana/access-control-api:latest

  # --- Auditing ---
  build-auditing:
    runs-on: ubuntu-latest
    needs: [setup, lint, format-check, filter]
    if: needs.filter.outputs.auditing_api_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - run: |
          cd Auditing/Auditing.Api
          dotnet restore Auditing.API.csproj
          dotnet build --configuration Release Auditing.API.csproj

  docker-build-auditing:
    runs-on: ubuntu-latest
    needs: [build-auditing, filter]
    if: needs.filter.outputs.auditing_api_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Build Docker image for Auditing API
        run: docker build -t gyliana/auditing-api:${{ github.sha }} -f Auditing/Auditing.Api/Dockerfile .
      - name: Push Docker image with SHA tag
        run: docker push gyliana/auditing-api:${{ github.sha }}
      - name: Tag image as latest
        run: docker tag gyliana/auditing-api:${{ github.sha }} gyliana/auditing-api:latest
      - name: Push latest tag
        run: docker push gyliana/auditing-api:latest

  # --- Snyk Security Scan ---
  snyk-scan:
    runs-on: ubuntu-latest
    needs:
    - test-document
    - test-user
    - test-access-control
    - build-auditing
    - filter
    if: |
      needs.filter.outputs.document_api_changed == 'true' ||
      needs.filter.outputs.user_api_changed == 'true' ||
      needs.filter.outputs.access_control_changed == 'true' ||
      needs.filter.outputs.auditing_changed == 'true'
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
    - run: npm install -g snyk
    - run: dotnet restore DocumentManagementSystem.sln
    - run: snyk test --all-projects --project-type=dotnet --detection-depth=5 --sarif-file-output=snyk.sarif
      continue-on-error: true
    - uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: snyk.sarif