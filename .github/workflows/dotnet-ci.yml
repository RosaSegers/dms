name: .NET CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  DOTNET_CORE_VERSION: '8.0'
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

  build-api-gateway:
    name: Build API Gateway
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - name: Build
        run: |
          cd ApiGateway
          dotnet restore ApiGateway.csproj
          dotnet build --configuration Release ApiGateway.csproj

  build-document-api:
    name: Build Document API
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - name: Build
        run: |
          cd Document/Document.API
          dotnet restore Document.API.csproj
          dotnet build --configuration Release Document.API.csproj

  build-user-api:
    name: Build User API
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - name: Build
        run: |
          cd User/User.API
          dotnet restore User.API.csproj
          dotnet build --configuration Release User.API.csproj

  test-document-api:
    name: Test Document API
    runs-on: ubuntu-latest
    needs: build-document-api
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - name: Run Tests
        run: |
          cd Document/Document.API
          dotnet test Document.API.csproj --logger:"trx" --results-directory "TestResults" --collect:"XPlat Code Coverage" /p:CoverletOutputFormat=cobertura
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: document-api-test-results
          path: Document/Document.API/TestResults

  test-user-api:
    name: Test User API
    runs-on: ubuntu-latest
    needs: build-user-api
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - name: Run Tests
        run: |
          cd User/User.API
          dotnet test User.API.csproj --logger:"trx" --results-directory "TestResults" --collect:"XPlat Code Coverage" /p:CoverletOutputFormat=cobertura
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: user-api-test-results
          path: User/User.API/TestResults

  snyk-scan:
    name: Snyk Security Scan (.NET Projects)
    runs-on: ubuntu-latest
    needs:
      - test-document-api
      - test-user-api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Validate Snyk Token
        if: ${{ secrets.SNYK_TOKEN == '' }}
        run: |
          echo "‚ùå SNYK_TOKEN secret is missing!" && exit 1

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Restore .NET Solution
        run: dotnet restore DocumentManagementSystem.sln

      - name: Run Snyk Test (All .NET Projects)
        run: snyk test --all-projects --detection-depth=5 --project-type=dotnet --token=${{ secrets.SNYK_TOKEN }}