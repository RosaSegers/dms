name: User API CI

on:
  push:
    paths:
      - 'User/**'
      - '.github/workflows/user-api.yml'
  pull_request:
    paths:
      - 'User/**'
      - '.github/workflows/user-api.yml'

jobs:
  setup:
    uses: ./.github/workflows/setup-dotnet.yml
    with:
      dotnet_version: '8.0'

  lint:
    uses: ./.github/workflows/lint.yml
    needs: setup
    with:
      solution_path: DocumentManagementSystem.sln

  format:
    uses: ./.github/workflows/format-check.yml
    needs: setup
    with:
      solution_path: DocumentManagementSystem.sln

  secrets:
    uses: ./.github/workflows/gitguardian.yml
    secrets:
      GG_SHIELD_API_KEY: ${{ secrets.GG_SHIELD_API_KEY }}
    with:
      base_branch: 'origin/main'

  build:
    runs-on: ubuntu-latest
    needs: [lint, format]
    steps:
      - uses: actions/checkout@v4
      - run: |
          cd User/User.API
          dotnet restore
          dotnet build --configuration Release

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - run: dotnet restore User/User.Api.Test/User.Api.Test.csproj
      - run: |
          cd User/User.Api.Test
          dotnet test --configuration Release
      - uses: actions/upload-artifact@v4
        with:
          name: user-api-test-results
          path: User/User.Api.Test/TestResults

  integration:
    runs-on: ubuntu-latest
    needs: build
    services:
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose environment
        run: docker compose -f docker-compose.e2e.yml up --build -d

      - name: Wait for User API to be ready
        run: |
          echo "Waiting for http://localhost:80..."
          for i in {1..30}; do
            if curl -sSf http://localhost:80 > /dev/null; then
              echo "User API is up!"
              exit 0
            fi
            echo "Waiting..."
            sleep 5
          done
          echo "Timed out waiting for User API"
          exit 1

      - name: Restore and build integration test project
        run: |
          cd User/User.Api.IntegrationTests
          dotnet restore
          dotnet build --configuration Release

      - name: Run integration tests
        run: |
          cd User/User.Api.IntegrationTests
          dotnet test --configuration Release

      - name: Tear down Docker Compose environment
        if: always()
        run: docker compose -f docker-compose.e2e.yml down -v

  docker:
    runs-on: ubuntu-latest
    needs: [test, integration]
    steps:
      - uses: actions/checkout@v4
      - run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - run: docker build -t gyliana/user-api:${{ github.sha }} -f User/User.API/Dockerfile .
      - run: docker push gyliana/user-api:${{ github.sha }}
      - run: docker tag gyliana/user-api:${{ github.sha }} gyliana/user-api:latest
      - run: docker push gyliana/user-api:latest

  snyk:
    uses: ./.github/workflows/snyk.yml
    needs: docker
    with:
      solution_path: DocumentManagementSystem.sln
    secrets:
      snyk_token: ${{ secrets.SNYK_TOKEN }}
